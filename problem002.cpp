//Kevin Yeap
/*========== Project Euler: Problem 2 ==========
Even Fibonacci numbers
Problem 2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:

1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.
=========================*/

/*========== program design notes ==========
If you notice that in a Fibonacci sequence, every 3 numbers is even, We can prove this
using rules of even and odd

odd  + odd  = even
odd  + even = odd
even + even = even

using these rules we can create a base case of the first 3 iterations, 
then prove using induction that every 3 numbers will be an even.

so we only need to add every 3 numbers of the sequence.
=========================*/

/*========== program output ==========
        == Project Euler: Problem 2 ==

answer: 4613732
=========================*/

#include <iostream>
using namespace std;

int add_even_fibonacci(int limit);

int main() {
  
  int limit = 4000000; //4 million
  int result = add_even_fibonacci(limit);

  cout << "\t== Project Euler: Problem 2 ==" << endl << endl; 
  cout << "answer: " << result << endl << endl;

  return 0;
}

int add_even_fibonacci(int limit) {
  
  //we use these starting values so the algorithm starts as if it just added 2 (the first even number) to the total.
  int x = 1; 
  int y = 2;
  int z = 3;
  int total = 2;
  
  while ((x+y) <= limit) {
    for (int i = 0; i < 3; i++) {
      z = x + y;
      x = y;
      y = z;
    }
    total += z;
  }
  
  return total;
}



